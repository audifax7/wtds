generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  SUPERVISOR
  LABORATOR
  SOURCE
  DISTRIBUTOR
  RSB
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(CUSTOMER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  services              Service[]
  chemicals             Chemical[]
  issues                Issue[]
  sources               Source[]
  sourceActions         SourceAction[]
  provinces             Province[]
  districts             District[]
  sectors               Sector[]
  cells                 Cell[]
  villages              Village[]
  treatments            Treatment[]
  regulations           Regulation[]
  lines                 Line[]
  distributions         Distribution[]
  feedbacks             Feedback[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Service {
  id        String   @id @default(cuid())
  name      String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issues    Issue[]
  createdAt DateTime @default(now()) @db.Date()
  updatedAt DateTime @updatedAt
}

model Line {
  id            String         @id @default(cuid())
  name          String         @unique
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now()) @db.Date()
  updatedAt     DateTime       @updatedAt
  distributions Distribution[]
}

model Chemical {
  id         String      @id @default(cuid())
  name       String      @unique
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now()) @db.Date()
  updatedAt  DateTime    @updatedAt
  treatments Treatment[]
}

model Issue {
  id         String   @id @default(cuid())
  content    String
  response   String?
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  customerId String
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @db.Date()
  updatedAt  DateTime @updatedAt
}

model SourceAction {
  id        String    @id @default(cuid())
  isOpen    Boolean
  openTime  DateTime
  closeTime DateTime?
  quantity  Int?
  sourceId  String
  source    Source    @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @db.Date()
  updatedAt DateTime  @updatedAt
}

model Province {
  id        String     @id @default(cuid())
  name      String     @unique
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  districts District[]
  createdAt DateTime   @default(now()) @db.Date()
  updatedAt DateTime   @updatedAt
}

model District {
  id         String   @id @default(cuid())
  name       String   @unique
  provinceId String
  province   Province @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sectors    Sector[]
  createdAt  DateTime @default(now()) @db.Date()
  updatedAt  DateTime @updatedAt
}

model Sector {
  id         String   @id @default(cuid())
  name       String
  districtId String
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cells      Cell[]
  createdAt  DateTime @default(now()) @db.Date()
  updatedAt  DateTime @updatedAt
}

model Cell {
  id        String    @id @default(cuid())
  name      String
  sectorId  String
  sector    Sector    @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  villages  Village[]
  createdAt DateTime  @default(now()) @db.Date()
  updatedAt DateTime  @updatedAt
}

model Village {
  id        String   @id @default(cuid())
  name      String
  cellId    String
  cell      Cell     @relation(fields: [cellId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sources   Source[]
  createdAt DateTime @default(now()) @db.Date()
  updatedAt DateTime @updatedAt
}

model Source {
  id            String         @id @default(cuid())
  name          String         @unique
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceActions SourceAction[]
  villageId     String
  village       Village        @relation(fields: [villageId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now()) @db.Date()
  updatedAt     DateTime       @updatedAt
}

model Treatment {
  id                           String   @id @default(cuid())
  rowWater                     Decimal
  rowWaterTurbidityAverage     Decimal
  treatedWater                 Decimal
  TreatedWaterTurbidityAverage Decimal
  domesticWaterUsed            String
  rsbRecommandation            String?
  chemicalId                   String
  approved                     Boolean  @default(false)
  chemical                     Chemical @relation(fields: [chemicalId], references: [id], onDelete: Cascade)
  userId                       String
  user                         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                    DateTime @default(now()) @db.Date()
  updatedAt                    DateTime @updatedAt
}

model Regulation {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Date()
  updatedAt DateTime @updatedAt
}

model Distribution {
  id           String    @id @default(cuid())
  isOpen       Boolean?
  openTime     DateTime?
  closeTime    DateTime?
  scheduleDate DateTime @db.Date()
  quantity     Int
  comment      String?
  lineId       String
  line         Line      @relation(fields: [lineId], references: [id], onDelete: Cascade)
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now()) @db.Date()
  updatedAt    DateTime  @updatedAt
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Date()
  updatedAt DateTime @updatedAt
}
